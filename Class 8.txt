Class 8 3-8-23
Topic: data type wrap-up, sub level, operators 
Next: condition 

C/C++/Java
Int a //memory will be allocated
a=100 //value will be stored in the allocated memory
Int b
b=200
Int c
c=100

Python
a=100 #memory will be allocated and a points to that memory
b=200
c=100



>>> mytuple=(100,200)
>>> type(mytuple)
<class 'tuple'>
>>> mytuple
(100, 200)
>>> mytuple=(100)
>>> type(mytuple)
<class 'int'>
>>> mytuple
100
>>> a,b=10,20
>>> a
10
>>> b
20
>>> a,b=(10,20)
>>> a
10
>>> (a,b)=(10,20)
>>> (a,b)=10,20
>>> mytuple=(100,)
>>> type(mytuple)
<class 'tuple'>
>>> mylist=[10,20,[30,40],50,(60,70),80]
>>> mylist
[10, 20, [30, 40], 50, (60, 70), 80]
>>> type(mylist)
<class 'list'>
>>> len(mylist)
6
>>> mylist[0]
10
>>> mylist[1]
20
>>> mylist[2]
[30, 40]
>>> mylist[2[0]]
Traceback (most recent call last):
  File "<pyshell#22>", line 1, in <module>
    mylist[2[0]]
TypeError: 'int' object is not subscriptable
>>> mylist[2][0]
30
>>> mylist[2][1]
40
mylist[2][0]=300
mylist
[10, 20, [300, 40], 50, (60, 70), 80]
mylist[5][1]
Traceback (most recent call last):
  File "<pyshell#27>", line 1, in <module>
    mylist[5][1]
TypeError: 'int' object is not subscriptable
mylist[4][1]
70
mylist[4][1]=700
Traceback (most recent call last):
  File "<pyshell#29>", line 1, in <module>
    mylist[4][1]=700
TypeError: 'tuple' object does not support item assignment
mydict={'id':123,'num':mylist, 'name':'sara'}
mydict
{'id': 123, 'num': [10, 20, [300, 40], 50, (60, 70), 80], 'name': 'sara'}
mydict['id']
123
mydict['num']
[10, 20, [300, 40], 50, (60, 70), 80]
mydict['num'][2]
[300, 40]
mydict['num'][2][1]
40
mydict['num'][2][1]=400
mydict
{'id': 123, 'num': [10, 20, [300, 400], 50, (60, 70), 80], 'name': 'sara'}
mydict['num'][4]
(60, 70)
mydict['num'][4][0]
60
mydict['num'][4][0]=90
Traceback (most recent call last):
  File "<pyshell#40>", line 1, in <module>
    mydict['num'][4][0]=90
TypeError: 'tuple' object does not support item assignment
mytuple=(100,)
mytuple=(100,mydict,200)
mytuple
(100, {'id': 123, 'num': [10, 20, [300, 400], 50, (60, 70), 80], 'name': 'sara'}, 200)
mytuple[1]
{'id': 123, 'num': [10, 20, [300, 400], 50, (60, 70), 80], 'name': 'sara'}
mytuple[1][num]
Traceback (most recent call last):
  File "<pyshell#45>", line 1, in <module>
    mytuple[1][num]
NameError: name 'num' is not defined. Did you mean: 'sum'?
mytuple[1]['num']
[10, 20, [300, 400], 50, (60, 70), 80]
mytuple[1]['num'][2]
[300, 400]
mytuple[1]['num'][2][0]
300
mytuple[1]['num'][2][0]=30
mytuple
(100, {'id': 123, 'num': [10, 20, [30, 400], 50, (60, 70), 80], 'name': 'sara'}, 200)
mytuple[1]['id']=90
mytuple
(100, {'id': 90, 'num': [10, 20, [30, 400], 50, (60, 70), 80], 'name': 'sara'}, 200)
a=100
b=200
c=100
a,b,c
(100, 200, 100)
id(a)
4497832152
id(b)
4497835352
id(c)
4497832152
c=c+1
c
101
id(c)
4497832184
c=c+99
id(c)
4497835352
10+20
30



10-20
-10
9*7
63
9/9
1.0
9//7
1
90//7
12
90/7
12.857142857142858
90%7
6
2**2
4
2**3
8
9>8
True
9<8
False
9>=8
True
(==8
 
SyntaxError: invalid syntax
9==8
 
False
9!=0
 
True



9==9
 
True


10==10 and 20==20
 
True
10==10 and 20!=20
 
False
10==10 or 20!=20
 
True
10==9 or 20!=20
 
False
10==10
 
True
not 10==10
 
False
not 10==0
 
True
a=100
 
a=a+10
 
a
 
110

a+=1=
 
SyntaxError: incomplete input
a+=10
 
a
 
120
a//=10
 
a
 
12
10 in [10,20.30]
 
True
10 not in [10,20.30]
 
False
'th' in 'python'
 
True
mydict
 
{'id': 90, 'num': [10, 20, [30, 400], 50, (60, 70), 80], 'name': 'sara'}
'id' in mydict
 
True
90 in mydict
 
False
10 is 10
 
True
10 is not 10
 
False
10 is '10'
 
False
10+20
 
30
'welcome' +'python'
 
'welcomepython'
10*5
 
50
'welcome'*5
 
'welcomewelcomewelcomewelcomewelcome'
